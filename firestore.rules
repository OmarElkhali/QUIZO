rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Fonctions utilitaires
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(resource) {
      return isAuthenticated() && 
        (resource.data.creatorId == request.auth.uid || 
         resource.data.ownerId == request.auth.uid);
    }
    
    function hasValidShareCode(quizId, shareCode) {
      let quiz = get(/databases/$(database)/documents/quizzes/$(quizId)).data;
      return quiz.visibility == "by_code" && quiz.shareCode == shareCode;
    }
    
    // Règles pour les quiz
    match /quizzes/{quizId} {
      // Lecture: propriétaire ou si le quiz est partagé par code
      allow read: if isAuthenticated() && 
        (isOwner(resource) || resource.data.visibility == "by_code");
      
      // Création: utilisateur authentifié
      allow create: if isAuthenticated() && 
        request.resource.data.creatorId == request.auth.uid;
      
      // Mise à jour et suppression: propriétaire uniquement
      allow update, delete: if isOwner(resource);
      
      // Questions du quiz
      match /questions/{questionId} {
        // Lecture: propriétaire ou si le quiz parent est partagé par code
        // Mais masquer les champs sensibles pour les non-propriétaires
        allow read: if isAuthenticated() && 
          (isOwner(get(/databases/$(database)/documents/quizzes/$(quizId))) || 
           get(/databases/$(database)/documents/quizzes/$(quizId)).data.visibility == "by_code");
        
        // Création, mise à jour, suppression: propriétaire du quiz parent uniquement
        allow create, update, delete: if isAuthenticated() && 
          isOwner(get(/databases/$(database)/documents/quizzes/$(quizId)));
      }
    }
    
    // Règles pour les compétitions
    match /competitions/{compId} {
      // Lecture: tout utilisateur authentifié avec le bon shareCode
      allow read: if isAuthenticated();
      
      // Création: utilisateur authentifié
      allow create: if isAuthenticated() && 
        request.resource.data.creatorId == request.auth.uid;
      
      // Mise à jour et suppression: propriétaire uniquement
      allow update, delete: if isOwner(resource);
      
      // Participants d'une compétition
      match /participants/{participantId} {
        // Lecture: propriétaire de la compétition ou le participant lui-même
        allow read: if isAuthenticated() && 
          (isOwner(get(/databases/$(database)/documents/competitions/$(compId))) || 
           resource.data.userId == request.auth.uid);
        
        // Création: utilisateur authentifié
        allow create: if isAuthenticated() && 
          request.resource.data.userId == request.auth.uid;
        
        // Mise à jour: propriétaire de la compétition ou le participant lui-même
        allow update: if isAuthenticated() && 
          (isOwner(get(/databases/$(database)/documents/competitions/$(compId))) || 
           resource.data.userId == request.auth.uid);
      }
    }
    
    // Règles pour les tentatives
    match /attempts/{attemptId} {
      // Lecture: propriétaire de la compétition ou le participant lui-même
      allow read: if isAuthenticated() && 
        (isOwner(get(/databases/$(database)/documents/competitions/$(resource.data.competitionId))) || 
         resource.data.participantId == request.auth.uid);
      
      // Création: utilisateur authentifié
      allow create: if isAuthenticated();
      
      // Mise à jour: uniquement si la tentative n'a pas déjà été complétée
      allow update: if isAuthenticated() && 
        (resource.data.completedAt == null);
    }
  }
}