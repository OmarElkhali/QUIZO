rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Règles pour la collection users
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow create, update: if request.auth != null && request.auth.uid == userId;
    }

    // Règles unifiées pour la collection quizzes
    match /quizzes/{quizId} {
      // Permettre la création si l'utilisateur est authentifié
      allow create: if request.auth != null;
      
      // Permettre la lecture si l'utilisateur est le créateur OU si le quiz est public
      // OU si l'utilisateur est un collaborateur
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.creatorId || 
        request.auth.uid == resource.data.userId || 
        resource.data.isPublic == true || 
        (resource.data.collaborators != null && resource.data.collaborators.hasAny([request.auth.uid]))
      );
      
      // Permettre la mise à jour et la suppression si l'utilisateur est le créateur
      allow update, delete: if request.auth != null && (
        request.auth.uid == resource.data.creatorId || 
        request.auth.uid == resource.data.userId
      );
      
      // Permettre les requêtes list avec des filtres appropriés
      allow list: if request.auth != null && 
        request.query.limit <= 100 && (
          request.query.where.creatorId == request.auth.uid || 
          request.query.where.userId == request.auth.uid || 
          request.query.where.isPublic == true || 
          request.query.where.collaborators.hasAny([request.auth.uid])
        );
    }

    // Règles pour les compétitions
    match /competitions/{competitionId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.creatorId;
    }

    // Règles pour les participants
    match /participants/{participantId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null;
      allow update: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Règles pour les tentatives
    match /attempts/{attemptId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.userId || 
        exists(/databases/$(database)/documents/competitions/$(resource.data.competitionId)) && 
        get(/databases/$(database)/documents/competitions/$(resource.data.competitionId)).data.creatorId == request.auth.uid
      );
      allow update: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Règles pour quizResults
    match /quizResults/{resultId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.userId || 
        exists(/databases/$(database)/documents/quizzes/$(resource.data.quizId)) && 
        get(/databases/$(database)/documents/quizzes/$(resource.data.quizId)).data.creatorId == request.auth.uid
      );
    }

    // Règles pour submissions
    match /submissions/{submissionId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Règles pour backup-questions
    match /backup-questions/{docId} {
      allow read: if request.auth != null;
    }
  }
}